@using FormFactory
@using FormFactory.Example.Controllers
@using FormFactory.Example.Models
@{
    ViewBag.Title = "FormFactory Examples";
}
<header class="jumbotron masthead">
    <div class="inner">
        <h1>FormFactory</h1>
        <p>
            The ASP.NET MVC html form builder
        </p>
        <p class="download-info">
            <a href="https://github.com/mcintyre321/FormFactory" class="btn btn-primary btn-large">View project on GitHub</a>
        </p>
    </div>

   
</header>
<div class="marketing">
    <div class="row">
        <div class="span4">
            <h2>
                Reflection form generation</h2>
            <p>
                Because you shouldn't have to update your html when you update your object model</p>
        </div>
        <div class="span4">
            <h2>
                Convention based rendering</h2>
            <p>
                Specify custom templates for rendering different object types.
            </p>
        </div>
        <div class="span4">
            <h2>
                Twitter bootstrap support</h2>
            <p>
                Styled for bootstrap (by default)</p>
        </div>
    </div>
    <!--/row-->
</div>
<section id="documentation">
    <div class="page-header">
        <h1>Documentation <small> </small></h1>
    </div>

    <h2>Installation</h2>

    <div class="row">
        <div class="span12">
            <p>
                <pre class="prettyprint">Nuget install-package FormFactory </pre>
            </p>
        </div>
    </div><!-- /row -->
    

    <h2>Rendering a form for a controller action:</h2>

    <div class="row">
        <div class="span12">
         
          <p> Given this action...

              <pre class="prettyprint">
    [HttpPost] public virtual ActionResult SignIn(string email, [DataType(DataType.Password)] string password, string returnUrl)
        { //... } 
</pre>
          </p>
          <p> ..writing this in the view...
              <pre class="prettyprint"> 
        using (var form = Html.FormForAction((HomeController c, string p0, string p1, bool p2, string p3) => c.SignIn(p0, p1, p2, p3)))
        {
            form.Inputs = form.Inputs.Where(i => i.Name != "returnUrl"); //filter out the returnUrl parameter as it is a querystring parameter
            form.Render(); //renders the form - actually .Render() calls .RenderStart(), .RenderActionInputs() and .RenderButtons()
        } //.Dispose() closes the form
    </pre>
          </p>
          <p>...will render this form:</p>
          @{

              using (var form = Html.FormForAction((HomeController c, string p0, string p1, bool p2, string p3) => c.SignIn(p0, p1, p2, p3)))
              {
                  form.Inputs = form.Inputs.Where(i => i.Name != "returnUrl"); //filter out the returnUrl parameter as it is a querystring parameter
                  form.Render(); //renders the form - actually .Render() calls .RenderStart(), .RenderActionInputs() and .RenderButtons()
              } //.Dispose() closes the form
    }
      </div>
    </div><!-- /row -->
    <h2>Rendering a form for a controller action with a model parameter:</h2>

    <div class="row">
        <div class="span12">
         
          <p> Given this action...

              <pre class="prettyprint">
    [HttpPost] public virtual ActionResult SignInWithModel([FormModel] SignInModel model)
        { //... } 
</pre>
          </p>
          <p> ..writing this in the view...
              <pre class="prettyprint"> 
        using (var form = Html.FormForAction((HomeController c, SignInModel p0) => c.SignInWithModel(p03)))
        {
            form.Inputs = form.Inputs.Where(i => i.Name != "returnUrl"); //filter out the returnUrl parameter as it is a querystring parameter
            form.Render(); //renders the form - actually .Render() calls .RenderStart(), .RenderActionInputs() and .RenderButtons()
        } //.Dispose() closes the form
    </pre>
          </p>
          <p>...will render this form:</p>
          @{

              using (var form = Html.FormForAction((HomeController c, SignInModel p0) => c.SignInWithModel(p0)))
              {
                  
                  form.Inputs = form.Inputs.Where(i => i.Name != "model.ReturnUrl"); //filter out the returnUrl parameter as it is a querystring parameter
                  form.Render(); //renders the form - actually .Render() calls .RenderStart(), .RenderActionInputs() and .RenderButtons()
              } //.Dispose() closes the form
    }
      </div>
  </div><!-- /row -->
</section>
<h2>
    So whats actually going on here?</h2>
<p>
    When FormHelper renders an input, it examines the type of the action parameter or
    object property and looks for the best view for the object. E.g. if you were rendering
    a string, it would render the view "Property.System.String". If it can't find a
    suitable view, it looks at the basetype, and tries that. If it still can't find
    on, it defaults to the "Property.System.Object" render.
</p>
<p>
    You can override these templates by creating your own partials with the same names
    in your own project, so if you don't want to use Twitter bootstrap, you don't have
    to.
</p>
<h1>
    Rendering objects
</h1>
<p>
    You can also render objects using this system to create dynamic pages that don't
    need updating
    <pre class="prettyprint">
public class Person
    {
        DateTime _dateOfBirth;

        public Person(DateTime dateOfBirth, string[] hobbies)
        {
            _dateOfBirth = dateOfBirth;
            Hobbies = hobbies;
            Position = Models.Position.SeniorSubcontractor;
            Enabled = true;
        }

        //readonly property
        public int Age { get { return (int) Math.Floor((DateTime.Now - _dateOfBirth).Days/365.25); } }

        //writable property
        public string Name { get; set; }

        //nullable enumerable property
        public Position? Position { get; set; }

        public bool Enabled { get; set; }

        //readonly property
        public IEnumerable
<string> Hobbies { get; private set; }

        public string Gender { get; set; }
        //choices for geneder rendered as a select list
        public IEnumerable<string> Gender_choices() 
        {
            return "male,female,not specified".Split(',');
        }

        public string Location { get; set; }
        //location enhanced with auto complete
        public IEnumerable<string> Location_suggestions() 
        {
            return "USA,UK,Canada".Split(',');
        } 

    }

</pre>
    @{
   

        var me = new Person(DateTime.Parse("22 Dec 1981"), "Fishing,Fighting".Split(',')) { Name = "Harry" };
    }
    <p>
        <form>
        @{
            Html.PropertiesFor(me).Render();
        }
        </form>
    </p>
</p>
