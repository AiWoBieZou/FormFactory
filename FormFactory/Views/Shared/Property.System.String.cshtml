@using System.ComponentModel.DataAnnotations
@using FormFactory
@model PropertyVm
@if (Model.Choices != null)
{
    var choices = Model.Choices.Cast<string>();
    <select name="@Model.Name" id="@Model.Name" class="@(Model.IsWritable ? "" : "disabled")" @(Model.IsWritable ? "" : "disabled=disabled")>
        @foreach (var option in choices)
        {
            <option value="@option">@option</option>    
        }
    </select>
}
else
{
    var dataAttributes = Model.GetCustomAttributes().OfType<DataTypeAttribute>();
    var inputType = dataAttributes.Any(da => da.DataType == DataType.Password) ? "password" : "text";


    <input class="xlarge @(Model.IsWritable ? "" : "disabled")" id="@Model.Name" name="@Model.Name" size="30" type="@inputType" value="@Model.Value" @(Model.IsWritable ? "" : "disabled=\"disabled\"")/>
    
    if (Model.Suggestions != null && Model.Suggestions.Cast<object>().Any())
    {
        var escapedSuggestions = Model.Suggestions.Cast<string>().Select(s => s.Replace("'", "''"));
    <script type="text/javascript">
        $(function () {
            if (jQuery().pluginMethod) {
                $("#@Model.Name").autocomplete({ source: ['@Html.Raw(string.Join("', '", escapedSuggestions))'] });
            } else {
                console.log("could not load $.autocomplete for @Model.Name suggestions");
            }
        });
    </script>
    }
}