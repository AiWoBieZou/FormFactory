@using FormFactory
@model PropertyVm
@using System.Collections
@using FormFactory
@if (Model.Choices != null && !Model.Readonly)
{
    <ul class="ff-choices fresh">
        @{
    var choices = Model.Choices.Cast<object>().ToArray();

    var selectedIndex = choices
        .Select((choice, index) => new { index, choice })
        .Where(pair => pair.choice.IsSelected())
        .Select(pair => pair.index)
        .FirstOrDefault();
    var i = 0;
        }
        @foreach (var choice in choices)
        {
            var isSelected = (i == selectedIndex);
            var choiceType = choice == null ? Model.Type : choice.GetType();
            
            <li class="ff-choice ">
                <div class="@Html.Raw((i < choices.Length - 1) ? "bottom-separated" : "")">
                    <input type="radio" class="ff-choice-selector " name="@(Model.Name)_ModelTypeName_radios" @isSelected.Att("checked") @Model.Disabled()/>
                    <div>
                        <div>@(choice == null ? "None" : choiceType.Name.Sentencise())</div>
                        @{
            Html.PropertiesFor(choice, choiceType)
                .Each(p => p.Name = Model.Name + "." + p.Name)
                .Each(p => p.Readonly |= Model.Readonly)
                .Each(p => p.Disabled |= Model.Disabled).Each(p => p.Disabled |= !isSelected)
                .Render(); }
                    </div>
                </div>
            </li>
            i++;
        }
    </ul>
    <script type="text/javascript">
        window.setTimeout(function () {
            if (window["28e19a48-567f-46c3-abd2-a67c84512c06"] === undefined) {
                $(".ff-choices input.ff-choice-selector:!checked").on("change", function () { //unchecked choice radios
                    var choiceArea = $(this).closest(".ff-choice");
                    var choices = choiceArea.closest(".ff-choices");
                    choices
                        .find("> .ff-choice")
                        .find(":input")
                            .not(choices.find(".ff-choice-selector")
                            .not(choices.find(".ff-choices .ff-choice-selector")))
                        .attr("disabled", "disabled");
                    var myInputs = choiceArea.find(":input").not(choiceArea.find(".ff-choice input"));
                    myInputs.attr("disabled", null);
                    var childChoices = choiceArea.find(".ff-choice").not(choiceArea.find(".ff-choice .ff-choice"));
                    childChoices.find(".ff-choice-selector").not(childChoices.find(".ff-choices .ff-choice-selector"))
                        .attr("disabled", null).not("[checked!='checked']").trigger("change");
                });
                $(".ff-choices .ff-choice").on("click", function (e) {
                    if ($(e.target).parents().index($(this)) >= 0) {
                        var option = $(this).find("> * > .ff-choice-selector[disabled!='disabled'][checked!='checked']");
                        if (option.length) {
                            option.attr("checked", "checked").trigger("change");
                            e.stopPropagation();
                            $(e.target).click();
                        }
                    }
                });
                window["28e19a48-567f-46c3-abd2-a67c84512c06"] = true;
            }
        }, 1)
    </script>
}
else
{
    Html.PropertiesFor(Model.Value, Model.Type)
        .Each(p => p.Name = Model.Name == null ? p.Name : Model.Name + "." + p.Name).Render();
}
