@using System
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using FormFactory
@using FormFactory.AspMvc
@model PropertyVm
@using System.Collections
@using FormFactory
@using IHtmlString = FormFactory.IHtmlString
@if (Model.Choices != null && !Model.Readonly)
{
    <div class="ff-choices-area">
        @{
    var choices = Html.Choices(Model);
    var selectedIndex = FormFactory.ViewHelpers.Object.GetSelectedIndex(choices);


    var useRadio = FormFactory.ViewHelpers.Object.UseRadio(Model);

    if (!useRadio)
    {

            <div>
                <select class="ff-choice-picker" @FormFactory.ViewHelper.Disabled(Model)>
                    @for (int i = 0; i < choices.Length; i++)
                    {

                        <option value="@i" @Html.Raw((i == selectedIndex).Attr("selected", null))>@(choices[i] == null ? "None" : choices[i].name)</option>
                    }
                </select>
            </div>
    }
        }
        <div class="ff-choices">
            @{
    var radioGroupName = Guid.NewGuid().ToString();
    for (int i = 0; i < choices.Length; i++)
    {
        var choice = choices[i];
        var obj = choices[i].obj;
        var isSelected = (i == selectedIndex);
        var isDisabled = Model.Disabled | !isSelected;
                <div class="ff-choice "  @Html.Raw((useRadio || isSelected) ? "" : "style='display:none'") >
                    <div class="@Html.Raw((i < choices.Length - 1) && useRadio ? "bottom-separated" : "")">
                        <input type="radio" class="ff-choice-selector " @Html.Raw(!useRadio ? "style='display:none'" : "") name="@radioGroupName" @Html.Raw(isSelected.Attr("checked", null)) @ViewHelper.Attr(Model.Disabled, "Disabled", null)/>
                        <div @Html.Raw(useRadio ? "class=\"radio-block\"" : "")>
                            @if (useRadio)
                            {
                                <div class="ff-choice-name">@(obj == null ? "None" : choice.name)</div>
                            }
                            @foreach (var p in choice.properties)
                            {
                                p.Disabled |= isDisabled;
                                @Html.Partial("FormFactory/Form.Property", p);
                            }
                        </div>
                    </div>
                </div>

    }
            }
        </div>
    </div>

}
else
{
    var properties = Html.PropertiesFor(Model.Value, Model.Type);
    foreach (var p in properties)
    {
        p.Name = Model.Name == null ? p.Name : Model.Name + "." + p.Name;
    @Html.Partial("FormFactory/Form.Property", p);
    }
}
