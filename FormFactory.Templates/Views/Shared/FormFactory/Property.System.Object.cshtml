@using FormFactory
@model PropertyVm
@using System.Collections
@using FormFactory
@if (Model.Choices != null && Model.IsWritable)
{
    <ul class="ff-property-choices fresh">
        @{
            System.Diagnostics.Debugger.Break();
    var choices = Model.Choices.Cast<object>().ToArray();

    var selectedIndex = choices
        .Select((choice, index) => new { index, choice })
        .Where(pair => pair.choice.IsSelected())
        .Select(pair => pair.index)
        .FirstOrDefault();
    var i = 0;
        }
        @foreach (var choice in choices)
        {
            var isSelected = (i == selectedIndex);
            var choiceType = choice == null ? Model.Type : choice.GetType();
            
            <li class="ff-choice-area ">
                <div class="@Html.Raw((i < choices.Length -1) ? "bottom-separated" : "")">
                    <input type="radio" class="choice-selector " name="@(Model.Name)_ModelTypeName_radios" @Html.Raw(isSelected ? "checked=\"checked\"" : "") />
                    <div>
                        <div>@(choice == null ? "None" : choiceType.Name.Sentencise())</div>
                    
                        @{
                            Html.PropertiesFor(choice, choiceType)
                                .Each(p => p.Name = Model.Name + "." + p.Name)
                                .Each(p => p.IsWritable = p.IsWritable)
                                .Render(); }
                    </div>
                </div>
            </li>
            i++;
        }
    </ul>
    <script type="text/javascript">
        window.setTimeout(function () {
            if (window["28e19a48-567f-46c3-abd2-a67c84512c06"] === undefined) {
                $(".ff-property-choices input.choice-selector:!checked").on("change", function () { //unchecked choice radios
                    $(this).closest(".ff-property-choices").find(":input:not(input.choice-selector)")
                        .attr("disabled", "disabled"); //make all inputs disabled
                    $(this).closest("li").find(":input").attr("disabled", null); //and enable the relevant ones

                });
                $(".ff-property-choices .ff-choice-area").on("click", function () {
                    var cb = $(this).find("input.choice-selector");
                    if (!cb.attr("checked")) {
                        cb.attr("checked", "checked").trigger("change");
                    }
                });
                window["28e19a48-567f-46c3-abd2-a67c84512c06"] = true;
            }
            $(".ff-property-choices.fresh input.choice-selector:checked").each(function () {
                var parentOption = $(this).closest(".ff-choice-area").parent().closest(".ff-choice-area").find("> * > .choice-selector");
                if (!parentOption.length || parentOption.attr("checked"))
                    $(this).trigger("change");
            });
            $(".ff-property-choices.fresh").removeClass("fresh");
        }, 1)
    </script>
}
else
{
    Html.PropertiesFor(Model.Value, Model.Type)
        .Each(p => p.Name = Model.Name == null ? p.Name : Model.Name + "." + p.Name).Render();
}

