@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using FormFactory
@model PropertyVm
@using System.Collections
@using FormFactory
@if (Model.Choices != null && !Model.Readonly)
{


    <div class="ff-choices-area">
        @{
    var choices = (from obj in Model.Choices.Cast<object>().ToArray()
                   let choiceType = obj == null ? Model.Type : obj.GetType()
                   let properties = Html.PropertiesFor(obj, choiceType)
                       .Each(p => p.Name = Model.Name + "." + p.Name)
                       .Each(p => p.Readonly |= Model.Readonly)
                       .Each(p => p.Id = Guid.NewGuid().ToString())
                       .Each(p => p.Disabled |= Model.Disabled)
                   select new { obj, choiceType, properties }).ToArray();

    var selectedIndex = choices
        .Select((choice, index) => new { index, choice })
        .Where(pair => pair.choice.obj.IsSelected())
        .Select(pair => pair.index)
        .FirstOrDefault();

    var useRadio = Model.GetCustomAttributes().OfType<DataTypeAttribute>().Where(dt => dt.CustomDataType == "Radio").Any();

    if (!useRadio)
    {

            <div>
                <select class="ff-choice-picker" @Model.Disabled()>
                    @for (int i = 0; i < choices.Length; i++)
                    {

                        <option value="@i" @((i == selectedIndex).Att("selected"))>@(choices[i] == null ? "None" : choices[i].choiceType.Name.Sentencise())</option>
                    }
                </select>
            </div>
    }
        }
        <div class="ff-choices">
            @for (int i = 0; i < choices.Length; i++)
            {
                var choice = choices[i];
                var obj = choices[i].obj;
                var isSelected = (i == selectedIndex);
            

                <div class="ff-choice " @Html.Raw(!useRadio && !isSelected ? "style='display:none'" : "") >
                    <div class="@Html.Raw((i < choices.Length - 1) && useRadio ? "bottom-separated" : "")">
                        <input type="radio" class="ff-choice-selector " @Html.Raw(!useRadio ? "style='display:none'" : "") name="@(Model.Name)_ModelTypeName_radios" @isSelected.Att("checked") @Model.Disabled()/>
                        <div>
                            @if (useRadio)
                            {

                                <div class="ff-choice-name">@(obj == null ? "None" : choice.choiceType.Name.Sentencise())</div>
                            }
                            @if (PropertyVm.TypeSlug != null)
                            {

                                <input type="hidden" name="@(Model.Name).__type" @((!isSelected).Att("disabled")) value="@(PropertyVm.TypeSlug((obj == null ? Model.Type : obj.GetType())))"/>                                
                            }
                            @{ choice.properties.Each(p => p.Disabled |= (i != selectedIndex)).Render(); }
                        </div>
                    </div>
                </div>
            
            }
        </div>
       
    </div>

}
else
{
    Html.PropertiesFor(Model.Value, Model.Type)
        .Each(p => p.Name = Model.Name == null ? p.Name : Model.Name + "." + p.Name).Render();
}
