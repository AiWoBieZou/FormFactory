@using System
@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using FormFactory.Attributes
@using FormFactory
@using FormFactory.AspMvc
@model PropertyVm
@{
    var model = (PropertyVm)Model;

    if (!Model.Readonly && Model.Choices != null)
    {
        var choices = Model.Choices as IEnumerable<Tuple<string, string>>;
        if (choices == null && Model.Choices is IEnumerable<string>)
        {
            var newChoices = new List<Tuple<String, string>>();
            foreach (string choice in Model.Choices)
            {
                newChoices.Add(System.Tuple.Create(choice, choice));
            }
            choices = newChoices.ToArray();
        }
    <select name="@Model.Name"  @FormFactory.ViewHelper.Readonly(Model) @FormFactory.ViewHelper.Disabled(Model)>
        @foreach (var option in choices)
        {
            <option value="@option.Item2" @ViewHelper.Attr((Model.Value != null && option.Item2 == Model.Value.ToString()), "selected", null)>@option.Item1</option>
        }
    </select>
    }
    else
    {

        var inputType = FormFactory.ViewHelpers.String.GetInputTypeFromDataTypeAttribute(Model);
        var typeAhread = FormFactory.ViewHelpers.String.GetTypeAheadAttribute(Model);
        if (inputType == "textarea")
        {
    <textarea @typeAhread @FormFactory.ViewHelper.Readonly(Model) @FormFactory.ViewHelper.Disabled(Model) @Html.UnobtrusiveValidation(Model)  @FormFactory.ViewHelper.Placeholder(Model) name="@Model.Name" rows="5">@Model.Value</textarea>
        }
        else
        {
    <input @FormFactory.ViewHelper.Readonly(Model) @typeAhread @FormFactory.ViewHelper.Disabled(Model) @FormFactory.ViewHelper.Placeholder(Model) @Html.UnobtrusiveValidation(Model) class="input-large" name="@Model.Name" size="30" type="@inputType" value="@Model.Value" />
        }
    }
}